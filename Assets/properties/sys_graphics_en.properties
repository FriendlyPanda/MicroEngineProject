#Version: 1.0
# The messages used for for displaying the messages in the program

# Every message should be comprised of the location in the code where the message is used,
# followed by the state the message is used in, usage and then the result
# an example of this should look like this:
# location.state.usage.result=message

# NOTE: the exact syntax is optional, however it is a good practice to categorise it
# the only requirement is the key, the = sign and then the message, value or a placeholder
# Example: key=value

# comments are categorised by the # used at the start of the line, the message board will ignore those lines
# as well as the empty spaces

# placeholders or {} are used in places where the data can be added later by the program.
# if the number of parameters is smaller the number of placeholders then a {} will be logged instead.
# if the number of parameters is greater, then the first parameter will be used, and the rest ignored.
# there is no limit to how many placeholders can be used

# if message is not found a missing message string will be returned with the name of the missing message

# this format can also be used to contain the program settings,
# however a conversion from a string to a desired type is required

# if you want the message to be read out by the message board upon loading
# you need to use ! instead of the # at the start of the line
!test message

# To update the value of a key then you can do this using the update(key, newValue); function
# Updating the values does not automatically save to the file, to do so you have to use the save(); function.
# the save(); function will save the updated values to the file the values have been taken from.
# if no updates have been made then nothing will happen.

#glfw
glfw.failed_init=Failed to initialize GLFW
glfw.failed_window=Failed to open GLFW window. If you have an Intel GPU, they are not 3.3 compatible. Try the 2.1 version of the tutorials.

# glew
glew.failed_init=Failed to initialize GLEW

# shaders
shader.wrong_filepath=Unable to load a shader at path: {}
shader.compile=Compiling shader : {}
shader.compile.success=Shader compilation succeeded
shader.compile.fail=Shader compilation failed.
shader.linking=Linking program


# graphics engine
graphics_engine.close=Terminated graphics engine
graphics_engine.init.success=Initialised graphics engine successfully
graphics_engine.init.fail=Graphic engine initialisation failure, aborting...
graphics_engine.shader.linking.success=Shader program successfully linked to the graphics engine
graphics_engine.shader.linking.fail=Shader failed to link to the graphics engine
graphics_engine.run.start=Run procedure started
graphics_engine.run.shader.activated=shader program activated
graphics_engine.run.framebuffer.init.start=creating and linking framebuffer object
graphics_engine.run.framebuffer.init.end=framebuffer object successfully linked
graphics_engine.run.loop.start=main loop start
graphics_engine.run.loop.end=main loop end
graphics_engine.run.init.fail=the initialization of the graphics engine failed, aborting run procedure

# c functions
string_conversion.failed=The string to integer convertion failed, backup value ({}) will be used

# basic messages
msg.test=Message board test
msg.empty={}

