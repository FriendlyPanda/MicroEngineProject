//
// Created by janha on 12/03/2024.
// Documentation Generated by Jetbrains AI
//

#ifndef MEP_EBO_H
#define MEP_EBO_H


#include "GL/glew.h"

class EBO {
public:
    GLuint ID;
    /**
     * @brief Default constructor for the EBO (Element Buffer Object) class.
     *
     * This constructor initializes the EBO object with default values.
     */
    EBO();
    /**
     * @class EBO
     *
     * @brief The EBO class represents an element buffer object in OpenGL.
     *
     * This constructor initializes the EBO object with provided values.
     */
    EBO(GLuint * indices, GLsizeiptr size);

    /**
     * @brief Binds the element buffer object (EBO).
     *
     * This function binds the currently active element buffer object (EBO).
     * It is used to specify the currently active EBO for subsequent rendering operations.
     *
     * @note The EBO must be created and initialized before calling this method.
     *
     * @see EBO::unbind()
     * @see EBO::clear()
     */
    void bind();
    /**
     * @brief Unbinds the element buffer object from the current OpenGL context.
     *
     * This function unbinds the element buffer object (EBO) from the current OpenGL context,
     * allowing other EBOs to be bound or used for rendering.
     *
     * @note This function should be called after rendering is finished with the current EBO.
     *       Failing to unbind the EBO may lead to unexpected results or errors in subsequent OpenGL operations.
     *
     * @sa EBO::bind()
     */
    void unbind();
    /**
     * @brief Clears the EBO (Element Buffer Object).
     *
     * This function deletes the buffer object associated with this EBO instance.
     * After calling this function, the EBO instance will no longer have a valid ID.
     *
     * @note Make sure to unbind the EBO before calling this function.
     *
     * @see EBO::unbind()
     * @see EBO::bind()
     */
    void clear();

};


#endif //MEP_EBO_H
