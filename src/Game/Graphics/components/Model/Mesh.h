//
// Created by janha on 31/03/2024.
// Documentation Generated by Jetbrains AI
//

#ifndef MEP_MESH_H
#define MEP_MESH_H

#include "MeshPrerequesite.h"
#include "../Shaders/Shader.h"
#include <vector>

class Mesh {
public:
    // mesh Data
    std::vector<Vertex>       vertices;
    std::vector<unsigned int> indices;
    std::vector<ModelTexture>      textures;
    GLuint VAO;

    /**
     * @class Mesh
     * @brief Represents a mesh object in a 3D scene.
     *
     * A mesh is defined by a collection of vertices, indices, and textures. It also provides methods for setting up the mesh and drawing it.
     */
    Mesh(std::vector<Vertex> vertices, std::vector<unsigned int> indices, std::vector<ModelTexture> textures);
    /**
     * @brief Draws the mesh using the specified shader program.
     *
     * This function draws the mesh using the specified shader program.
     *
     * @param shader The shader program to use for rendering.
     */
    void Draw(Shader &shader);
private:
    GLuint VBO, EBO;
    /**
     * \brief Sets up the mesh by creating vertex buffer objects (VBOs) and vertex array objects (VAOs).
     *
     * This function generates VBOs and VAOs for the mesh. It initializes the necessary buffers and loads the vertex data into them.
     * The vertex data is specified by the vertices vector.
     */
    void setupMesh();

};


#endif //MEP_MESH_H
