//
// Created by janha on 15/02/2024.
// Documentation Generated by Jetbrains AI
//

#ifndef MEP_VAO_H
#define MEP_VAO_H


#include "GL/glew.h"
#include "../VBO/VBO.h"

class VAO {
public:
    GLuint ID;
    /**
     * @class VAO
     *
     * @brief The VAO class represents a Vertex Array Object in OpenGL.
     *
     * A Vertex Array Object (VAO) is an OpenGL object that stores the format and data used to
     * render vertex data. It encapsulates the vertex format and the associated Vertex Buffer Objects (VBOs)
     * and Element Buffer Objects (EBOs) which hold the actual vertex and index data, respectively.
     *
     * The VAO class provides methods to create, bind, unbind, and clear a VAO, as well as link vertex attributes to VBOs.
     */
    VAO();
    /**
     * @brief Creates a new Vertex Array Object (VAO).
     *
     * This function generates a new VAO ID using glGenVertexArrays and stores it in the ID member variable.
     */
    void VAO_create();

    /**
    * @brief Links a Vertex Buffer Object (VBO) to a Vertex Array Object (VAO) using a specified layout.
    *
    * This function binds the VBO, sets the attribute pointer with the specified layout, enables the attribute array,
    * and then unbinds the VBO.
    *
    * @param vbo The Vertex Buffer Object (VBO) to be linked to the Vertex Array Object (VAO).
    * @param layout The layout location of the attribute in the shader program.
    * @param numComponents The number of components in the attribute.
    * @param type The data type of each component.
    * @param stride The stride between consecutive attribute values.
    * @param offset The offset of the first component in the attribute.
    *
    * @see VAO
    * @see VBO
    */
    void link_attribute(VBO vbo, GLuint layout, GLuint numComponents, GLenum type, GLsizeiptr stride, void * offset);
    /**
     * @brief Binds the VAO.
     *
     * This function binds the Vertex Array Object (VAO) identified by its ID. Once bound, any operations on VBO's
     * (Vertex Buffer Objects) and EBO's (Element Buffer Objects) will operate on this VAO.
     */
    void bind();
    /**
     * @brief Unbinds the Vertex Array Object (VAO).
     *
     * This function unbinds the currently bound Vertex Array Object (VAO) by calling glBindVertexArray(0).
     * After calling this function, any subsequent OpenGL calls that modify VAO state will affect the default VAO (id: 0).
     */
    void unbind();
    /**
     * @brief Clears the VAO.
     *
     * This function deletes the Vertex Array Object (VAO) associated with the VAO instance.
     *
     * @note The VAO must be bound before calling this function.
     *
     * @see bind()
     * @see unbind()
     */
    void clear();

};


#endif //MEP_VAO_H
