//
// Created by JFH on 03/01/2023.
// Documentation Generated by Jetbrains AI
//


#ifndef MEP_GE_H
#define MEP_GE_H


#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)

//Windows based systems
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#elif __APPLE__
// appple systems
#elif __linux__
//linux based systems
#endif

#define DEFAULT_SCREEN_WIDTH 1280
#define DEFAULT_SCREEN_HEIGHT 720

#include <cstdio>
#include <functional>

//#include <GL/glew.h>
#include "GL/glew.h"
#include <GLFW/glfw3.h>


#include "../misc/InternalLogger.h"
#include "components/EBO/EBO.h"
#include "components/FBO/FBO.h"
#include "components/Model/Model.h"
#include "components/Shaders/Shader.h"
#include "components/VAO/VAO.h"
#include "components/VBO/VBO.h"
#include "components/camera/Camera.h"
#include "modules/GUIBaseClass.h"

#include "imgui/backends/imgui_impl_glfw.h"
#include "imgui/backends/imgui_impl_opengl3.h"
#include "imgui/imgui.h"
#include "../NodeSystem/Nodes/BaseNode.h"
#include "../NodeSystem/Nodes/Node_Object.h"


// OpenGL Maths
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <utility>

class GraphicsEngine {
public:
    /**
     * @class GraphicsEngine
     *
     * The GraphicsEngine class is responsible for managing the rendering of graphics and handling user interfaces.
     * It provides various methods for initializing the engine, running the main loop, adding and removing nodes, and setting the user interface.
     */
    GraphicsEngine();
    /**
     * @class GraphicsEngine
     *
     * The GraphicsEngine class is responsible for managing the rendering of graphics and handling user interfaces.
     * It provides various methods for initializing the engine, running the main loop, adding and removing nodes, and setting the user interface.
     */
    GraphicsEngine(FBO * fbo_ptr, MessageBoard * config_ptr, double * deltaTime);
    /**
     * @brief Initializes the graphics engine.
     *
     * This function initializes the graphics engine by performing the necessary setup and configuration.
     *
     * @return 0 if the initialization is successful, -1 otherwise.
     */
    int init_();

    /**
     * @brief Set the shader program of the GraphicsEngine.
     *
     * This function sets the shader program of the GraphicsEngine.
     *
     * @param newShaderProgram Pointer to the new Shader program.
     */
	void setShaderProgram(Shader * newShaderProgram);

/**
 * @brief Set the mesh for the GraphicsEngine.
 *
 * This function sets the mesh to be used by the GraphicsEngine for rendering.
 *
 * @param newMesh A pointer to the Mesh object to set.
 */
//	void setUIRender(std::function<void()> * start, std::function<void()> * end);
    void setMesh(Mesh * newMesh);



    /**
     * @brief Runs the graphics engine.
     *
     * This function is responsible for running the graphics engine. It initializes the necessary components,
     * activates the shader program, sets up the framebuffer, and enters the main rendering loop. The loop
     * continues until the user presses ESC key or closes the window.
     *
     * @return 0 if the graphics engine ran successfully, -1 otherwise.
     */
    int _run();
    /**
     * @brief Closes the graphics engine.
     *
     * Destroys the window, clears the frame buffer object, clears the texture,
     * clears the render buffer object, closes the GUI context, clears the shader program,
     * terminates GLFW, and logs a message.
     *
     * @see GraphicsEngine::GraphicsEngine()
     * @see GraphicsEngine::GraphicsEngine(FBO*, MessageBoard*, double*)
     * @see GraphicsEngine::init_()
     * @see GraphicsEngine::setShaderProgram(Shader*)
     * @see GraphicsEngine::setMesh(Mesh*)
     * @see GraphicsEngine::_run()
     * @see GraphicsEngine::checkSuccess()
     * @see GraphicsEngine::setUI(GUIBaseClass*)
     * @see GraphicsEngine::getWindow()
     * @see GraphicsEngine::addNode(Node*)
     * @see GraphicsEngine::removeNode(int)
     * @see GraphicsEngine::getNode(int)
     * @see GraphicsEngine::getNodeObject(const string&)
     * @see GraphicsEngine::~GraphicsEngine()
     * @see GraphicsEngine::framebuffer_size_callback(GLFWwindow*, int, int)
     *
     * @param void
     * @return void
     */
    void _close();

    /**
     * @brief Check if the GraphicsEngine initialization was successful.
     *
     * @return bool Returns true if initialization was successful,
     *         otherwise returns false.
     */
    bool checkSuccess() const;

    /**
     * @brief Set the user interface for the GraphicsEngine.
     *
     * This function sets the user interface for the GraphicsEngine. It takes a pointer to a GUIBaseClass object
     * and initializes the necessary parameters for the user interface.
     *
     * @param gui A pointer to a GUIBaseClass object representing the user interface.
     */
    void setUI(GUIBaseClass * gui);

    /**
     * @brief Get the GLFW window associated with the GraphicsEngine.
     *
     * This function returns the GLFWwindow object associated with the GraphicsEngine.
     *
     * @return A pointer to the GLFWwindow object.
     */
    GLFWwindow * getWindow();

    /**
     * @class GraphicsEngine
     * @brief The GraphicsEngine class represents a graphics engine for rendering and displaying graphics.
     *
     * The GraphicsEngine class provides functionality for managing nodes, setting up the rendering environment,
     * and handling user input. It utilizes a node system to organize and render objects in the 3D world.
     */
// Node system
    void addNode(Node * newNode);
    /**
     * @brief Removes a node with the given ID from the GraphicsEngine.
     *
     * This function removes a node with the specified ID from the GraphicsEngine.
     * If the node exists, it is removed from the `rootNode` and its ID is erased from `nodeIDs` vector.
     * If the node does not exist, a warning message is logged.
     *
     * @param ID The ID of the node to be removed.
     */
    void removeNode(int ID);
    /**
     * @brief Gets a Node object based on its ID.
     *
     * @param ID The ID of the Node object.
     * @return A pointer to the Node object if found, nullptr otherwise.
     */
    Node * getNode(int ID);
    /**
     * @brief Gets the Node_Object with the given name.
     *
     * This function searches for a Node_Object with the given name in the GraphicsEngine's node system. It iterates through all the nodes in the system, and if a Node_Object with a matching name is found, it returns a pointer to that Node_Object. If no matching Node_Object is found, it returns nullptr.
     *
     * @param name The name of the Node_Object to find.
     * @return Node_Object* A pointer to the Node_Object with the given name, or nullptr if not found.
     */
    Node_Object * getNodeObject(const std::string& name);

    /**
     * @brief Gets a pointer to the Node with the specified ID
     *
     * @param ID The ID of the Node to retrieve
     * @return Node* A pointer to the Node with the specified ID, or nullptr if not found
     */
    ~GraphicsEngine();

private:

    static void framebuffer_size_callback(GLFWwindow * window, int width, int height) {
        glViewport(0, 0, width, height);
    }

    bool init_success = false;

	// window settings
    GLFWwindow * window;
	int windowWidth;
	int windowHeight;

	// frame buffers
    FBO *fbo;
    RBO rbo;
    Texture txt;

	// temp testing parameters
    Mesh * mesh;
    glm::vec3 color = {0.8, 0.2, 0.1};
    float transparency = 0.6;
    ImGuiIO io;

	// world view
    Camera camera = Camera(glm::vec3(0.0f, 0.0f, 3.0f), glm::vec3(0.0f, 0.0f, 0.0f));

    Shader * shaderProgram;
    double * deltaTime;


	// messages and logs
    MessageBoard * config;
    InternalLogger log = InternalLogger("Graphics");

	// UI
    GUIBaseClass * ui = nullptr;

    // objects
    Node rootNode = Node(0);
    std::vector<unsigned int> nodeIDs = {};

};


#endif //MEP_GE_H