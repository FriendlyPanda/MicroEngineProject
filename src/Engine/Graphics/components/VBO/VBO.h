//
// Created by janha on 14/02/2024.
// Documentation Generated by Jetbrains AI
//

#ifndef MEP_VBO_H
#define MEP_VBO_H


#include "GL/glew.h"

class VBO {
public:
    // Reference ID of the Vertex Buffer Object
    GLuint ID;

    /**
     * @brief A structure representing a Vertex Buffer Object (VBO).
     *
     * The VBO class provides functionality to create, bind, unbind, and clear a VBO in OpenGL.
     */
// Basic Constructors
    VBO();
    /**
     * @brief A structure representing a Vertex Buffer Object (VBO).
     *
     * The VBO class provides functionality to create, bind, unbind, and clear a VBO in OpenGL.
     */
    VBO(GLfloat * vertices, GLsizeiptr size);

    /**
     * @brief Binds the Vertex Buffer Object (VBO) to the GL program.
     *
     * This function binds the VBO to the currently active GL program.
     * It uses the reference ID of the VBO to bind the corresponding
     * OpenGL array buffer. This allows the VBO to be used for drawing
     * or modifying vertex data.
     *
     * @see VBO::bind()
     */
// Binds the VBO to the GL program
    void bind();

    /**
     * @brief Unbinds the Vertex Buffer Object (VBO) from the OpenGL program.
     *
     * This function unbinds the VBO, which means it dissociates the VBO from the current OpenGL program.
     * After calling this function, any subsequent operations on the VBO will not affect the OpenGL program.
     *
     * @note This function is a member function of the VBO struct/class.
     *       It must be called on an instance of the struct/class (object).
     *       Example usage: VBO myVBO; myVBO.unbind();
     */
// unbinds VBO from the GL program
    void unbind();

    /**
     * @brief Clears the memory of the Vertex Buffer Object (VBO).
     *
     * This function will delete the VBO from the graphics memory by calling `glDeleteBuffers`.
     *
     * @note Make sure that the VBO is not currently bound before calling this function.
     */
// delete and clear memory
    void clear();
};


#endif //MEP_VBO_H
