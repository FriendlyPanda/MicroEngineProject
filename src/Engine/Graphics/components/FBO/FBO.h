//
// Created by janha on 12/03/2024.
// Documentation Generated by Jetbrains AI
//

#ifndef MEP_FBO_H
#define MEP_FBO_H
#include "GL/glew.h"
#include "../RBO/RBO.h"
#include "../Texture/Texture.h"

class FBO {
public:
    GLuint ID;
    /**
     * @brief The FBO struct represents a Framebuffer Object (FBO) in OpenGL.
     *
     * The FBO struct encapsulates the functionality related to managing a framebuffer object,
     * which is used for off-screen rendering in OpenGL.
     */
    FBO();
    /**
     * @brief Creates a Framebuffer Object (FBO) with the specified RenderBuffer Object (RBO) and Texture.
     *
     * This function creates a Framebuffer Object (FBO) with the specified RenderBuffer Object (RBO) and Texture.
     * The FBO is generated using the `glGenFramebuffers` function. If there is an OpenGL error during generation, an error is printed to the console and the function returns.
     * The function then binds the FBO using the `bind` function, stores the provided RBO and Texture in the FBO struct, and links the RBO and Texture using the `linkRBO` and `linkTexture` functions.
     * Finally, it checks if the FBO is complete using the `glCheckFramebufferStatus` function. If the FBO is not complete, an error is printed to the console.
     * After that, it unbinds the FBO using the `unbind` function.
     *
     * @param newRBO The RenderBuffer Object (RBO) to be used in the FBO.
     * @param newTexture The Texture to be used in the FBO.
     */
    void FBO_create(RBO newRBO, Texture newTexture);
    RBO rbo;
    Texture texture;

    /**
     * @brief Binds the framebuffer object (FBO).
     *
     * This function binds the framebuffer object (FBO) to the OpenGL context.
     * Once the FBO is bound, any subsequent rendering operations will affect
     * the FBO instead of the default framebuffer.
     */
    void bind();
    /**
     * @brief Unbinds the FBO by binding the default framebuffer.
     *
     * This function is used to unbind the FBO by binding the default framebuffer (ID 0).
     * It allows subsequent rendering to be performed on the default framebuffer.
     *
     * @note This function is part of the FBO struct and should be called on an instance of the FBO.
     *
     * @see bind()
     */
    void unbind();
    /**
     * @brief Clears the frame buffer object (FBO).
     *
     * This function deletes the frame buffer object identified by the
     * FBO's ID. This effectively clears all attached render buffers and
     * textures associated with the FBO.
     *
     * @remark This function should be called before destroying or
     * reusing the FBO to properly clean up resources.
     */
    void clear();
    /**
     * @brief Links a RenderBuffer Object (RBO) to the FrameBuffer Object (FBO).
     *
     * This function sets the provided RBO as the RBO of the FBO. It binds the RBO, attaches it to the depth-stencil attachment point
     * of the FBO using the `glFramebufferRenderbuffer` function, and then unbinds the RBO.
     *
     * @param rbo The RBO to be linked to the FBO.
     */
    void linkRBO(RBO rbo);
    /**
     * @brief Links a texture to the framebuffer object (FBO).
     *
     * This function links the given texture to the framebuffer object (FBO). It binds the texture and attaches it as the color attachment 0 of the FBO using `glFramebufferTexture2D` function. After that, it unbinds the texture.
     *
     * @param txtr The texture to be linked to the FBO.
     */
    void linkTexture(Texture txtr);
    /**
     * @brief Rescales the FBO to the given width and height.
     *
     * This function rescales the Framebuffer Object (FBO) to the specified width and height. After rescaling,
     * the FBO's texture and renderbuffer objects will also be resized accordingly. Additionally, the FBO's texture
     * and renderbuffer objects will be relinked to the FBO.
     *
     * @param width The new width of the FBO.
     * @param height The new height of the FBO.
     */
    void rescale(int width, int height);
};


#endif //MEP_FBO_H
